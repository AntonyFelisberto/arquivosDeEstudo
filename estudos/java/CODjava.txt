APÊNDICE A – Código Java Chat Cliente

package chat;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
public class ChatCliente {
 static JFrame chatJanela = new JFrame("Meu Chat"); //A janela do programa com
barra de título, ícone, botões de comeando e etc.
 static JTextArea chatMensagens = new JTextArea(22, 40); //Caixa de texto de
várias linhas, ou seja o usuário ver as mensagens enviadas e recebidas
 static JTextField chatNovaMensagem = new JTextField(40); //Campo de texto de
uma linha onde o usuário escreverá sua mensagem
 static JButton chatBotaoEnviar = new JButton("Enviar"); // Botão para enviar a
mensagem
 static BufferedReader entrada; //entrada de dados
 static PrintWriter saida; //saida de dados
 static JLabel chatUsuarioLogado = new JLabel("");
 public ChatCliente() { //contrutor da estrutura visual
 chatJanela.setLayout(new FlowLayout()); //tipo de layout (FlowLayout)
 chatJanela.add(chatUsuarioLogado); //adicionando o TextArea
 chatJanela.add(new JScrollPane(chatMensagens)); //adicionando o TextArea
 chatJanela.add(chatNovaMensagem); //adicionando o TextField
 chatJanela.add(chatBotaoEnviar); //adicionando o botao
 //melhorando o visual da estrutura visual
29

 chatJanela.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //operação
para fechar o JFrame quando clicar no X
 chatJanela.setSize(475, 500); //tamanho da janela
 chatJanela.setVisible(true); //deixando ela visivel
 chatMensagens.setEditable(false); //nao permite que o JTextArea tenha edição
 chatNovaMensagem.setEditable(false); //nao permite que o JTextField tenha
edição
 chatBotaoEnviar.addActionListener(new Listener());
 chatNovaMensagem.addActionListener(new Listener());
 }
 public void iniciarChat() throws Exception {
 String enderecoIP = JOptionPane.showInputDialog(chatJanela, "Endereco IP do
Servidor", "informação", JOptionPane.PLAIN_MESSAGE);
 //pedindo ao usuario o endereço ip que ele deseja ser conectado e guardando
na variável 'enderecoIP'.
//A classe JOptionPane cria uma caixa de diálogo padrão que solicita um valor
para o usuário.
 Socket usuario = new Socket(enderecoIP, 9086); //Passando para a classe
Socket dois paramentros, o enderecoIP e a porta de entrada.
 entrada = new BufferedReader(new
InputStreamReader(usuario.getInputStream())); //recebendo informações do servidor
 saida = new PrintWriter(usuario.getOutputStream(), true); //enviando
informações do servidor
 while (true) { //laço infinito para esperar a conexão do usuário
 String msg = entrada.readLine(); //entrada vindo do servidor
 if (msg.equals("NOME_REQUERIDO")) { //Emitindo uma janela Nome
Requerido para que o usuario coloque o seu nome nela
 String nome = JOptionPane.showInputDialog(chatJanela, "Usuário: ",
"Informação", JOptionPane.PLAIN_MESSAGE);
 saida.println(nome);//informação indo para o servidor
 } else if (msg.equals("NOME_EXISTENTE")) {
 String nome = JOptionPane.showInputDialog(chatJanela, "Nome existente,
digite outro nome por favor!", JOptionPane.WARNING_MESSAGE); // Emitindo uma 
30
janela dizendo ao usuário que o nome ja consta na lista, e que é para ele digitar
outro nome
 saida.println(nome); //informação indo para o servidor
 } else if (msg.startsWith("NOME_ACEITO")) {
 chatNovaMensagem.setEditable(true); //nome do usuário e conexão
aceita, true para deixar o campo editavel
 chatUsuarioLogado.setText("Usuário: " + msg.substring(11));
 } else {
 chatMensagens.append(msg + "\n");
 }
 }
 }
 public static void main(String[] args) throws Exception {
 ChatCliente chat = new ChatCliente();
 chat.iniciarChat(); //rodando
 }
}
class Listener implements ActionListener {
 @Override
 public void actionPerformed(ActionEvent e) {
 ChatCliente.saida.println(ChatCliente.chatNovaMensagem.getText());
 ChatCliente.chatNovaMensagem.setText("");
 }
}

APÊNDICE B – Código Java Chat Server

package chat;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
public class ChatServer {
 static ArrayList<String> listaUsuarios = new ArrayList<String>(); //lista dos
usuários
 static ArrayList<PrintWriter> printWriters = new ArrayList<PrintWriter>(); //lista do
que que ira ser enviado para o cliente
 public static void main(String[] args) throws Exception {
 System.out.println("Aguardando novos usuários....");
 ServerSocket ss = new ServerSocket(9086);
 while (true) {
 Socket usuario = ss.accept();
 System.out.println("Usuario Conectado"); //aceitando a conexao de novos
usuarios
 ManipuladorConversa conversa = new ManipuladorConversa(usuario);
 conversa.start();
 }
 }
}
class ManipuladorConversa extends Thread { //Classe interna herdando de Thread
 Socket usuarioConversa; //socket
 BufferedReader entrada; //BuffereadReader classe para trabalhar com dados que
são recebidos do cliente para servidor
32
 PrintWriter saida; //PrintWriter classe para enviar dados para o usuario que estiver
conectado no servidor
 String nome; //armazenar o nome enviado pelo Usuário
 public ManipuladorConversa(Socket usuarioConversa) throws IOException {
 this.usuarioConversa = usuarioConversa; //atribuindo o paramentro para a
variavel interna
 }
 public void run() {
 try {
 entrada = new BufferedReader(new
InputStreamReader(usuarioConversa.getInputStream()));//InputStreamReader = ler
valores de entrada
 saida = new PrintWriter(usuarioConversa.getOutputStream(), true);
//OutputStream = valores de saida, true para enviar parametros para todos os
clientes que estão conectados no servidor
 int contador = 0;
 while (true) { //laço para verificar se o nome ja consta no banco
 if (contador > 0) {
 saida.println("NOME_EXISTENTE"); //nome negado
 } else {
 saida.println("NOME_REQUERIDO"); //nome aceito
 }
 nome = entrada.readLine(); //pegando o nome que o usuário colocou e
armazenando na variável nome
 if (nome == null) { //verificando se o usuário escrevel o nome ou não, se
não escreveu irá encererrar o programa
 return;
 }
33
 if (!ChatServer.listaUsuarios.contains(nome)) { //verificando se o nome
existe ou nao na lista, caso nao existe ele está adicionando
 ChatServer.listaUsuarios.add(nome);
 break; //finalizando a tarefa
 }
 contador++; //adicionando no contador
 }
 saida.println("NOME_ACEITO" + nome); //nome aceito
 ChatServer.printWriters.add(saida);
 while (true) {
 String msg = entrada.readLine();
 if (msg == null) {
 return;
 }
 for (PrintWriter writer : ChatServer.printWriters) {
 writer.println(nome + ":" + msg);
 }
 System.out.println("");
 }
 } catch (Exception e) {
 System.out.println("Erro no servidor:" + e.getMessage());
 e.printStackTrace();
 }
 }
}


APÊNDICE C – Cadastro CPF

package cpf;
import java.util.Scanner;
/**
*
* @author Usuario
*/
public class cpf {
 public static void main(String[] args) {
 Scanner ler = new Scanner(System.in);
 String CPF;
 System.out.printf("Informe um CPF: ");
 CPF = ler.next();
 System.out.printf("\nResultado: ");
 // usando os metodos isCPF() e imprimeCPF() da classe "ValidaCPF"
 if (ValidaCPF.isCPF(CPF) == true)
 System.out.printf("%s\n", ValidaCPF.imprimeCPF(CPF));
 else System.out.printf("Erro, CPF invalido !!!\n");
 }
 }


APÊNDICE D – Código Validação CPF

package cpf;
import java.util.InputMismatchException;
/**
*
* @author Usuario
*/
public class ValidaCPF {
public static boolean isCPF(String CPF) {
// considera-se erro CPF's formados por uma sequencia de numeros iguais
if (CPF.equals("00000000000") || CPF.equals("11111111111") ||
 CPF.equals("22222222222") || CPF.equals("33333333333") ||
 CPF.equals("44444444444") || CPF.equals("55555555555") ||
 CPF.equals("66666666666") || CPF.equals("77777777777") ||
 CPF.equals("88888888888") || CPF.equals("99999999999") ||
 (CPF.length() != 11))
 return(false);
char dig10, dig11;
int sm, i, r, num, peso;
try {
// Calculo do 1o. Digito Verificador
 sm = 0;
 peso = 10;
 for (i=0; i<9; i++) {

 num = (int)(CPF.charAt(i) - 48);
 sm = sm + (num * peso);
 peso = peso - 1;
 }
 r = 11 - (sm % 11);
 if ((r == 10) || (r == 11))
 dig10 = '0';
 else dig10 = (char)(r + 48); 
36
// Calculo do 2o. Digito Verificador
 sm = 0;
 peso = 11;
 for(i=0; i<10; i++) {
 num = (int)(CPF.charAt(i) - 48);
 sm = sm + (num * peso);
 peso = peso - 1;
 }
 r = 11 - (sm % 11);
 if ((r == 10) || (r == 11))
 dig11 = '0';
 else dig11 = (char)(r + 48);
// Verifica se os digitos calculados conferem com os digitos informados.
 if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10)))
 return(true);
else return(false);
} catch (InputMismatchException erro) {
 return(false);
}
 }
 public static String imprimeCPF(String CPF) {
return(CPF.substring(0, 3) + "." + CPF.substring(3, 6) + "." +
 CPF.substring(6, 9) + "-" + CPF.substring(9, 11));
 }

}


APÊNDICE E – Script Banco de Dados

REM Script: Instant Message
REM Banco de Dados APP
CREATE TABLE Login (
IdLogin int PRIMARY KEY NOT NULL,
Login Varchar(45),
Senha VARCHAR(45),
DataCadastro DATE,
Tipo VARCHAR(45),
CONSTRAINT CK_Tipo CHECK (Tipo IN ('ADM', 'COMUM'))
);
CREATE TABLE Usuario (
Usuario VARCHAR(60) NOT NULL,
CPF VARCHAR(100),
DataNascimento DATE,
IdUsuario INT PRIMARY KEY NOT NULL,
IdEndereco INT,
IdLogin int,
FOREIGN KEY(IdLogin) REFERENCES Login (IdLogin)
);
CREATE TABLE Telefone (
IdTelefone INT PRIMARY KEY NOT NULL,
Telefone VARCHAR(20),
Estado CHAR(2),
IdUsuario INT NOT NULL,
FOREIGN KEY(IdUsuario) REFERENCES Usuario (IdUsuario)
);
CREATE TABLE Endereco (
IdEndereco INT PRIMARY KEY NOT NULL,
Endereco VARCHAR(150),
Numero INT,
Bairro VARCHAR(60),
IdCidade VARCHAR(120) NOT NULL
);
CREATE TABLE Cidade ( 
38
IdCidade VARCHAR(120) PRIMARY KEY NOT NULL,
Cidade VARCHAR(120),
UF CHAR(2)
);
ALTER TABLE Usuario ADD FOREIGN KEY(IdEndereco) REFERENCES Endereco
(IdEndereco);
ALTER TABLE Endereco ADD FOREIGN KEY(IdCidade) REFERENCES Cidade
(IdCidade);
INSERT INTO Login (IdLogin, Login, Senha, DataCadastro, Tipo) VALUES
(1,'joao.almeida','@321', TO_DATE ('09-06-2021', 'DD/MM/YYYY'), 'ADM'); --
Cadastro Login
INSERT INTO Cidade VALUES (1, 'Londrina', 'PR'); -- Cadastro Cidade
INSERT INTO Endereco VALUES (1, 'RUA SOLDADO', 81, 'LINDOIA', 1); --
Cadastro Endereço
INSERT INTO Usuario VALUES ('João','000.000.000-00', TO_DATE ('05-08-1998',
'DD/MM/YYYY'), 1, 1, 1); -- Cadastro usuario
INSERT INTO Telefone VALUES (1, '43999999999', 'PR', 1);
INSERT INTO Login (IdLogin, Login, Senha, DataCadastro, Tipo) VALUES
(2,'davi.lucas','@321', TO_DATE ('16-06-2021', 'DD/MM/YYYY'), 'COMUM'); --
Cadastro Login2
INSERT INTO Usuario VALUES ('Davi','000.000.000-01', TO_DATE ('10-04-2001',
'DD/MM/YYYY'), 2, 1, 2); -- Cadastro usuario2
INSERT INTO Telefone VALUES (2, '43999999998', 'PR', 2);
SELECT L.Login, L.Tipo, L.DataCadastro, U.Usuario, T.Telefone, E.Endereco,
E.Bairro, C.Cidade, C.UF
 FROM Login L, Usuario U, Telefone T, Endereco E, Cidade C;
CREATE TABLE RELATORIO (
 RELATORIO_ID NUMBER(1) NOT NULL,
 QTDE_LOGIN NUMBER(4) NOT NULL,
 CONSTRAINT PK_RELATORIO PRIMARY KEY (RELATORIO_ID),
 CONSTRAINT CK_UNICO CHECK (RELATORIO_ID=1)
);
INSERT INTO RELATORIO (RELATORIO_ID, QTDE_LOGIN) VALUES (1,
(SELECT COUNT(*) FROM Login));
CREATE OR REPLACE TRIGGER TRIGGER_QTDE_LOG 
39
AFTER INSERT OR DELETE ON Login
FOR EACH ROW
BEGIN
IF INSERTING THEN
UPDATE RELATORIO
SET QTDE_LOGIN = QTDE_LOGIN+1;
ELSIF DELETING THEN
UPDATE RELATORIO
SET QTDE_LOGIN = QTDE_LOGIN+1;
END IF;
END;
/
SELECT QTDE_LOGIN FROM RELATORIO;
SELECT * FROM Login;